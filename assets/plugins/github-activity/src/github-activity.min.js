var GitHubActivity = function () { "use strict"; var e = {}, m = { renderLink: function (e, t, r) { return t || (t = e), void 0 === r && (r = ""), Mustache.render('<a class="' + r + '" href="{{url}}" target="_blank">{{{title}}}</a>', { url: e, title: t }) }, renderGitHubLink: function (e, t, r) { return t || (t = e), void 0 === r && (r = ""), m.renderLink("https://github.com/" + e, t, r) }, getMessageFor: function (r) { var a = r.payload; if (r.repoLink = m.renderGitHubLink(r.repo.name), r.userGravatar = Mustache.render('<div class="gha-gravatar-user"><img src="{{url}}" class="gha-gravatar-small"></div>', { url: r.actor.avatar_url }), a.ref && ("refs/heads/" === a.ref.substring(0, 11) ? r.branch = a.ref.substring(11) : r.branch = a.ref, r.branchLink = m.renderGitHubLink(r.repo.name + "/tree/" + r.branch, r.branch) + " at "), a.commits) { var e = a.before + "..." + a.head, t = a.commits.length; 2 === t ? r.commitsMessage = Mustache.render('<a href="https://github.com/{{repo}}/compare/{{shaDiff}}">View comparison for these 2 commits &raquo;</a>', { repo: r.repo.name, shaDiff: e }) : 2 < t && (r.commitsMessage = Mustache.render('<a href="https://github.com/{{repo}}/compare/{{shaDiff}}">{{length}} more ' + pluralize("commit", t - 2) + " &raquo;</a>", { repo: r.repo.name, shaDiff: e, length: a.size - 2 })), a.commits.forEach(function (e, t) { if (66 < e.message.length && (e.message = e.message.substring(0, 66) + "..."), !(t < 2)) return a.commits.splice(2, a.size), !1; e.shaLink = m.renderGitHubLink(r.repo.name + "/commit/" + e.sha, e.sha.substring(0, 6), "gha-sha"), e.committerGravatar = Mustache.render('<img class="gha-gravatar-commit" src="https://gravatar.com/avatar/{{hash}}?s=30&d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png" width="16" />', { hash: md5(e.author.email) }) }) } if (a.issue) { var i = r.repo.name + "#" + a.issue.number; r.issueLink = m.renderLink(a.issue.html_url, i), r.issueType = "issue", a.issue.pull_request && (r.issueType = "pull request") } if (a.pull_request) { var n = a.pull_request; if (r.pullRequestLink = m.renderLink(n.html_url, r.repo.name + "#" + n.number), r.mergeMessage = "", a.pull_request.merged) { a.action = "merged"; var s = "{{c}} " + pluralize("commit", n.commits) + " with {{a}} " + pluralize("addition", n.additions) + " and {{d}} " + pluralize("deletion", n.deletions); r.mergeMessage = Mustache.render('<br><small class="gha-message-merge">' + s + "</small>", { c: n.commits, a: n.additions, d: n.deletions }) } } if (a.comment && a.comment.pull_request_url) { i = r.repo.name + "#" + a.comment.pull_request_url.split("/").pop(); r.pullRequestLink = m.renderGitHubLink(a.comment.pull_request_url, i) } if (a.comment && a.comment.body && (r.comment = a.comment.body, 150 < r.comment.length && (r.comment = r.comment.substring(0, 150) + "..."), a.comment.html_url && a.comment.commit_id)) { i = r.repo.name + "@" + a.comment.commit_id.substring(0, 10); r.commentLink = m.renderLink(a.comment.html_url, i) } if ("ReleaseEvent" === r.type && (r.tagLink = m.renderLink(a.release.html_url, a.release.tag_name), r.zipLink = m.renderLink(a.release.zipball_url, "Download Source Code (zip)")), "GollumEvent" === r.type) { var o = a.pages[0]; r.actionType = o.action, r.message = r.actionType.charAt(0).toUpperCase() + r.actionType.slice(1) + " ", r.message += m.renderGitHubLink(o.html_url, o.title) } "FollowEvent" === r.type && (r.targetLink = m.renderGitHubLink(a.target.login)), "ForkEvent" === r.type && (r.forkLink = m.renderGitHubLink(a.forkee.full_name)), "MemberEvent" === r.type && (r.memberLink = m.renderGitHubLink(a.member.login)), a.gist && (r.actionType = "fork" === a.action ? a.action + "ed" : a.action + "d", r.gistLink = m.renderLink(a.gist.html_url, "gist: " + a.gist.id)); s = Mustache.render(templates[r.type], r); var l = millisecondsToStr(new Date - new Date(r.created_at)), c = { message: s, icon: "CreateEvent" == r.type && 0 <= ["repository", "branch", "tag"].indexOf(a.ref_type) ? icons[r.type + "_" + a.ref_type] : icons[r.type], timeString: l, userLink: m.renderGitHubLink(r.actor.login) }; return -1 < singleLineActivities.indexOf(r.type) ? Mustache.render(templates.SingleLineActivity, c) : Mustache.render(templates.Activity, c) }, getHeaderHTML: function (e) { return e.name ? e.userNameLink = m.renderLink(e.html_url, e.name) : e.withoutName = " without-name", e.userLink = m.renderLink(e.html_url, e.login), e.gravatarLink = m.renderLink(e.html_url, '<img src="' + e.avatar_url + '">'), Mustache.render(templates.UserHeader, e) }, getActivityHTML: function (e, t) { var r = "", a = e.length; if (t && a < t && (t = a), 0 === (t = t || a)) return Mustache.render(templates.NoActivity, {}); for (var i = 0; i < t; i++)r += m.getMessageFor(e[i]); return r }, getOutputFromRequest: function (t, r) { var a = new XMLHttpRequest; a.open("GET", t), a.setRequestHeader("Accept", "application/vnd.github.v3+json"), a.onreadystatechange = function () { if (4 === a.readyState) if (200 <= a.status && a.status < 300) { var e = JSON.parse(a.responseText); r(void 0, e) } else r("request for " + t + " yielded status " + a.status) }, a.onerror = function () { r("An error occurred connecting to " + t) }, a.send() }, renderStream: function (e, t) { t.innerHTML = Mustache.render(templates.Stream, { text: e, footer: templates.Footer }), t.style.position = "relative" }, writeOutput: function (e, t) { var r = "#" === e.charAt(0) ? document.getElementById(e.substring(1)) : document.getElementsByClassName(e.substring(1)); if (r instanceof HTMLCollection) for (var a = 0; a < r.length; a++)m.renderStream(t, r[a]); else m.renderStream(t, r) }, renderIfReady: function (e, t, r) { t && r && m.writeOutput(e, t + r) } }; return e.feed = function (a) { if (!a.username || !a.selector) throw "You must specify the username and selector options for the activity stream."; var i, n, s = a.selector, e = "https://api.github.com/users/" + a.username, t = e + "/events"; if (a.repository && (t = "https://api.github.com/repos/" + a.username + "/" + a.repository + "/events"), a.clientId && a.clientSecret) { var r = "?client_id=" + a.clientId + "&client_secret=" + a.clientSecret; e += r, t += r } if (a.eventsUrl && (t = a.eventsUrl), "object" == typeof a.templates) for (var o in templates) "string" == typeof a.templates[o] && (templates[o] = a.templates[o]); m.getOutputFromRequest(e, function (e, t) { i = e ? Mustache.render(templates.UserNotFound, { username: a.username }) : m.getHeaderHTML(t), m.renderIfReady(s, i, n) }), m.getOutputFromRequest(t, function (e, t) { if (e) n = Mustache.render(templates.EventsNotFound, { username: a.username }); else { var r = "undefined" != a.limit ? parseInt(a.limit, 10) : null; n = m.getActivityHTML(t, r) } m.renderIfReady(s, i, n) }) }, e }(); function millisecondsToStr(e) { "use strict"; function t(e) { return 1 < e ? "s atrás" : " atrás" } var r = Math.floor(e / 1e3), a = Math.floor(r / 31536e3); if (a) return a + " ano" + t(a); var i = Math.floor((r %= 31536e3) / 2592e3); if (i) return i + (1 < i ? "meses atrás" : "mês atrás"); var n = Math.floor((r %= 2592e3) / 86400); if (n) return n + " dia" + t(n); var s = Math.floor((r %= 86400) / 3600); if (s) return "cerca de " + s + " hour" + t(s); var o = Math.floor((r %= 3600) / 60); if (o) return o + " minuto" + t(o); var l = r % 60; return l ? l + " segundo" + t(l) : "agora" } function pluralize(e, t) { return 1 !== t ? e + "s" : e } function md5cycle(e, t) { var r = e[0], a = e[1], i = e[2], n = e[3]; a = ii(a = ii(a = ii(a = ii(a = hh(a = hh(a = hh(a = hh(a = gg(a = gg(a = gg(a = gg(a = ff(a = ff(a = ff(a = ff(a, i = ff(i, n = ff(n, r = ff(r, a, i, n, t[0], 7, -680876936), a, i, t[1], 12, -389564586), r, a, t[2], 17, 606105819), n, r, t[3], 22, -1044525330), i = ff(i, n = ff(n, r = ff(r, a, i, n, t[4], 7, -176418897), a, i, t[5], 12, 1200080426), r, a, t[6], 17, -1473231341), n, r, t[7], 22, -45705983), i = ff(i, n = ff(n, r = ff(r, a, i, n, t[8], 7, 1770035416), a, i, t[9], 12, -1958414417), r, a, t[10], 17, -42063), n, r, t[11], 22, -1990404162), i = ff(i, n = ff(n, r = ff(r, a, i, n, t[12], 7, 1804603682), a, i, t[13], 12, -40341101), r, a, t[14], 17, -1502002290), n, r, t[15], 22, 1236535329), i = gg(i, n = gg(n, r = gg(r, a, i, n, t[1], 5, -165796510), a, i, t[6], 9, -1069501632), r, a, t[11], 14, 643717713), n, r, t[0], 20, -373897302), i = gg(i, n = gg(n, r = gg(r, a, i, n, t[5], 5, -701558691), a, i, t[10], 9, 38016083), r, a, t[15], 14, -660478335), n, r, t[4], 20, -405537848), i = gg(i, n = gg(n, r = gg(r, a, i, n, t[9], 5, 568446438), a, i, t[14], 9, -1019803690), r, a, t[3], 14, -187363961), n, r, t[8], 20, 1163531501), i = gg(i, n = gg(n, r = gg(r, a, i, n, t[13], 5, -1444681467), a, i, t[2], 9, -51403784), r, a, t[7], 14, 1735328473), n, r, t[12], 20, -1926607734), i = hh(i, n = hh(n, r = hh(r, a, i, n, t[5], 4, -378558), a, i, t[8], 11, -2022574463), r, a, t[11], 16, 1839030562), n, r, t[14], 23, -35309556), i = hh(i, n = hh(n, r = hh(r, a, i, n, t[1], 4, -1530992060), a, i, t[4], 11, 1272893353), r, a, t[7], 16, -155497632), n, r, t[10], 23, -1094730640), i = hh(i, n = hh(n, r = hh(r, a, i, n, t[13], 4, 681279174), a, i, t[0], 11, -358537222), r, a, t[3], 16, -722521979), n, r, t[6], 23, 76029189), i = hh(i, n = hh(n, r = hh(r, a, i, n, t[9], 4, -640364487), a, i, t[12], 11, -421815835), r, a, t[15], 16, 530742520), n, r, t[2], 23, -995338651), i = ii(i, n = ii(n, r = ii(r, a, i, n, t[0], 6, -198630844), a, i, t[7], 10, 1126891415), r, a, t[14], 15, -1416354905), n, r, t[5], 21, -57434055), i = ii(i, n = ii(n, r = ii(r, a, i, n, t[12], 6, 1700485571), a, i, t[3], 10, -1894986606), r, a, t[10], 15, -1051523), n, r, t[1], 21, -2054922799), i = ii(i, n = ii(n, r = ii(r, a, i, n, t[8], 6, 1873313359), a, i, t[15], 10, -30611744), r, a, t[6], 15, -1560198380), n, r, t[13], 21, 1309151649), i = ii(i, n = ii(n, r = ii(r, a, i, n, t[4], 6, -145523070), a, i, t[11], 10, -1120210379), r, a, t[2], 15, 718787259), n, r, t[9], 21, -343485551), e[0] = add32(r, e[0]), e[1] = add32(a, e[1]), e[2] = add32(i, e[2]), e[3] = add32(n, e[3]) } function cmn(e, t, r, a, i, n) { return t = add32(add32(t, e), add32(a, n)), add32(t << i | t >>> 32 - i, r) } function ff(e, t, r, a, i, n, s) { return cmn(t & r | ~t & a, e, t, i, n, s) } function gg(e, t, r, a, i, n, s) { return cmn(t & a | r & ~a, e, t, i, n, s) } function hh(e, t, r, a, i, n, s) { return cmn(t ^ r ^ a, e, t, i, n, s) } function ii(e, t, r, a, i, n, s) { return cmn(r ^ (t | ~a), e, t, i, n, s) } function md51(e) { txt = ""; var t, r = e.length, a = [1732584193, -271733879, -1732584194, 271733878]; for (t = 64; t <= e.length; t += 64)md5cycle(a, md5blk(e.substring(t - 64, t))); e = e.substring(t - 64); var i = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; for (t = 0; t < e.length; t++)i[t >> 2] |= e.charCodeAt(t) << (t % 4 << 3); if (i[t >> 2] |= 128 << (t % 4 << 3), 55 < t) for (md5cycle(a, i), t = 0; t < 16; t++)i[t] = 0; return i[14] = 8 * r, md5cycle(a, i), a } function md5blk(e) { var t, r = []; for (t = 0; t < 64; t += 4)r[t >> 2] = e.charCodeAt(t) + (e.charCodeAt(t + 1) << 8) + (e.charCodeAt(t + 2) << 16) + (e.charCodeAt(t + 3) << 24); return r } var hex_chr = "0123456789abcdef".split(""); function rhex(e) { for (var t = "", r = 0; r < 4; r++)t += hex_chr[e >> 8 * r + 4 & 15] + hex_chr[e >> 8 * r & 15]; return t } function hex(e) { for (var t = 0; t < e.length; t++)e[t] = rhex(e[t]); return e.join("") } function md5(e) { return hex(md51(e)) } function add32(e, t) { return e + t & 4294967295 } if ("5d41402abc4b2a76b9719d911017c592" != md5("hello")) function add32(e, t) { var r = (65535 & e) + (65535 & t); return (e >> 16) + (t >> 16) + (r >> 16) << 16 | 65535 & r } var templates = { Stream: '<div class="gha-feed">{{{text}}}<div class="gha-push-small"></div>{{{footer}}}</div>', Activity: '<div id="{{id}}" class="gha-activity">               <div class="gha-activity-icon"><span class="octicon octicon-{{icon}}"></span></div>               <div class="gha-message"><div class="gha-time">{{{timeString}}}</div>{{{userLink}}} {{{message}}}</div>               <div class="gha-clear"></div>             </div>', SingleLineActivity: '<div class="gha-activity gha-small">                         <div class="gha-activity-icon"><span class="octicon octicon-{{icon}}"></span></div>                         <div class="gha-message">{{{userLink}}} {{{message}}}</div><div class="gha-time">{{{timeString}}}</div>                         <div class="gha-clear"></div>                       </div>', UserHeader: '<div class="gha-header">                 <div class="gha-github-icon"><span class="octicon octicon-mark-github"></span></div>                 <div class="gha-user-info{{withoutName}}">{{{userNameLink}}}<p>{{{userLink}}}</p></div>                 <div class="gha-gravatar">{{{gravatarLink}}}</div>               </div><div class="gha-push"></div>', Footer: '<div class="gha-footer">Public Activity <a href="https://github.com/leoallvez" target="_blank">Ver mais</a>', NoActivity: '<div class="gha-info">This user does not have any public activity yet.</div>', UserNotFound: '<div class="gha-info">User {{username}} wasn\'t found.</div>', EventsNotFound: '<div class="gha-info">Events for user {{username}} not found.</div>', CommitCommentEvent: "commented on commit {{{commentLink}}}<br>{{{userGravatar}}}<small>{{comment}}</small>", CreateEvent: "created {{payload.ref_type}} {{{branchLink}}}{{{repoLink}}}", DeleteEvent: "deleted {{payload.ref_type}} {{payload.ref}} at {{{repoLink}}}", FollowEvent: "started following {{{targetLink}}}", ForkEvent: "forked {{{repoLink}}} to {{{forkLink}}}", GistEvent: "{{actionType}} {{{gistLink}}}", GollumEvent: "{{actionType}} the {{{repoLink}}} wiki<br>{{{userGravatar}}}<small>{{{message}}}</small>", IssueCommentEvent: "commented on {{issueType}} {{{issueLink}}}<br>{{{userGravatar}}}<small>{{comment}}</small>", IssuesEvent: "{{payload.action}} issue {{{issueLink}}}<br>{{{userGravatar}}}<small>{{payload.issue.title}}</small>", MemberEvent: "added {{{memberLink}}} to {{{repoLink}}}", PublicEvent: "open sourced {{{repoLink}}}", PullRequestEvent: "{{payload.action}} pull request {{{pullRequestLink}}}<br>{{{userGravatar}}}<small>{{payload.pull_request.title}}</small>{{{mergeMessage}}}", PullRequestReviewCommentEvent: "commented on pull request {{{pullRequestLink}}}<br>{{{userGravatar}}}<small>{{comment}}</small>", PushEvent: 'pushed to {{{branchLink}}}{{{repoLink}}}<br>                <ul class="gha-commits">{{#payload.commits}}<li><small>{{{committerGravatar}}} {{{shaLink}}} {{message}}</small></li>{{/payload.commits}}</ul>                <small class="gha-message-commits">{{{commitsMessage}}}</small>', ReleaseEvent: 'released {{{tagLink}}} at {{{repoLink}}}<br>{{{userGravatar}}}<small><span class="octicon octicon-cloud-download"></span>  {{{zipLink}}}</small>', WatchEvent: "starred {{{repoLink}}}" }, icons = { CommitCommentEvent: "comment-discussion", CreateEvent_repository: "repo-create", CreateEvent_tag: "tag-add", CreateEvent_branch: "git-branch-create", DeleteEvent: "repo-delete", FollowEvent: "person-follow", ForkEvent: "repo-forked", GistEvent: "gist", GollumEvent: "repo", IssuesEvent: "issue-opened", IssueCommentEvent: "comment-discussion", MemberEvent: "person", PublicEvent: "globe", PullRequestEvent: "git-pull-request", PullRequestReviewCommentEvent: "comment-discussion", PushEvent: "git-commit", ReleaseEvent: "tag-add", WatchEvent: "star" }, singleLineActivities = ["CreateEvent", "DeleteEvent", "FollowEvent", "ForkEvent", "GistEvent", "MemberEvent", "WatchEvent"];